#!/bin/bash

# set -x

# If we find a tasklist in the PWD we use it. If we don't we use the tasklist
# in the users home directory.
if [ -f .todo-db.sql ]; then
   DB=.todo-db.sql
else
   DB=$HOME/.todo-db.sql
fi

# If the file does not exist, then error out.
if [ ! -f "$DB" ]; then
   echo "No database file found. Use the 'createdb' command to create one"
   exit 1
fi

export SQLITE="sqlite3 -column -header"
export DBSCHEMA="create table tasks (\
                     c_id          INTEGER PRIMARY KEY, \
                     c_priority    INTEGER,\
                     c_title       TEXT,\
                     c_body        TEXT);"

export DBLIST="select c_id as ID, c_priority as Priority, c_title as Title from tasks"
export DBSHOW1="select c_id as ID, c_priority as Priority, c_title as Title from tasks where c_id="
export DBSHOW2="select  c_body as 'Message Body' from tasks where c_id="

function die () {
   echo $@
   exit -1
}

function list () {
   export ORDER_COL="order by c_$SORTBY"
   case ${sort-order} in

      id)
         ORDER_COL="order by c_id";
         ;;

      priority)
         ORDER_COL="order by c_priority";
         ;;

      title)
         ORDER_COL="order by c_title";
         ;;

   esac

   SQLCMD="$DBLIST $ORDER_COL $ORDER_DIR"
   echo $SQLCMD | $SQLITE $DB
}

function show () {
   [ -z "$1" ] && die "Missing task ID"
   echo "$DBSHOW1$1" | $SQLITE $DB
   echo "$DBSHOW2$1" | $SQLITE $DB
}

function add () {
   export TITLE="${PARAMS[0]}"
   export BODY="${PARAMS[1]}"

   [ -z "$TITLE" ] && die "No title supplied for add function"

   if [ -z "$BODY" ]; then
      if [ ! -z "$EDITOR" ]; then
         FNAME=`tempfile`
         $EDITOR $FNAME && export BODY="`cat $FNAME`"
         rm -f $FNAME
      else
         export BODY=`cat`
      fi
   fi

   [ -z "$BODY" ] && die "No message body specified for task"

   echo "insert into tasks (c_title, c_priority, c_body) values\
                           ('$TITLE', '$PRIORITY', '$BODY');"\
         | $SQLITE $DB
}

function set_priority () {
   export PRIORITY="$2"
   export TASKID="$1"

   [ -z "$TASKID" ] && die "Missing task ID"
   [ -z "$PRIORITY" ] && die "No priority supplied for set-priority"

   echo "update tasks set c_priority=$PRIORITY where c_id=$TASKID" \
         | $SQLITE $DB
}

function set_title () {
   export TASKID="$1"
   shift
   export TITLE="$*"

   [ -z "$TASKID" ] && die "Missing task ID"
   [ -z "$TITLE" ] && die "No title supplied for set-title"

   echo "update tasks set c_title='$TITLE' where c_id=$TASKID" \
         | $SQLITE $DB
}

function set_message () {
   export TASKID="$1"
   shift
   export BODY="$*"

   if [ -z "$BODY" ]; then
      if [ ! -z "$EDITOR" ]; then
         FNAME=`tempfile`
         $EDITOR $FNAME && export BODY="`cat $FNAME`"
         rm -f $FNAME
      else
         export BODY=`cat`
      fi
   fi

   [ -z "$BODY" ] && die "No message body specified for task"

   echo "update tasks set c_body='$BODY' where c_id=$TASKID" \
         | $SQLITE $DB
}

function search_db () {

   [ -z "$*" ] && die "No search terms specified"

   WCLAUSE="where (c_title like '%$1%' OR c_body like '%$1%') "
   shift

   for X in $*; do
      WCLAUSE="$WCLAUSE $CONJ (c_title like '%$X%' OR c_body like '%$X%') "
   done

   echo $WCLAUSE

   echo "$DBLIST $WCLAUSE" | $SQLITE $DB
}

function delete_task () {
   export TASKID="$1"

   [ -z "$TASKID" ] && die "Missing task ID"

   export TITLE="`echo select c_title from tasks where c_id=1 | sqlite3 $DB`"

   if [ -z "$FORCE" ]; then
      echo "Are you sure you want to delete task '$TITLE'? (Y/n)"
      read LINE
      if [ "$LINE" != "Y" ]; then
         echo "Not deleting task '$TITLE'"
         exit 0;
      fi
   fi

   echo "delete from tasks where c_id=$TASKID" \
         | $SQLITE $DB
}

function prune () {
   echo "delete from tasks where c_priority<0" \
         | $SQLITE $DB
}


function createdb () {
   [ -f $DB ] && return 0
   echo $DBSCHEMA | $SQLITE $DB
}

function print_help_msg () {
   echo '
Terminal-Todo: Maintain a list of tasks with priorities. The tasklist is
resolved as follows:
   - If a tasklist exists in $HOME it will be used,
   - If a tasklist exists in $PWD, then it will be used instead of the
     tasklist in $HOME.
   - If no tasklist is found, then one is created in $PWD.

To create a tasklist in $HOME, simply change directory to $HOME and run any
`todo` command.

'
   echo "todo <command> [options]"
   echo "todo <command> [options] <command-arguments>"
   echo "todo [options] <command> <command-arguments>"
   echo "todo <command> <command-arguments> [options]"
   echo '
Commands:
   createdb
         Creates a new database in the current directory.

   list [-s column | --sorted-by-<column>]
         Display all tasks. The list can be sorted with "--sort-by=<column>"
      or "-s <column>" where <column> is a column name. Use the option
      "-r" or "--reverse" to reverse the sort order.
         If no sort column is specified the list is sorted by the task IDs.

   add <title> [message-body] [-e <editor> | --editor=<editor>]
         Add a new task to the list. The <title> is mandatory. If a [message-
      body] is not specified then an editor will be started to prompt for a
      message. Use "--editor=<editor>" or "-e <editor>" to specify an editor.
      If no editor is specified then the $EDITOR environment variable will be
      used.

   show <task-id>
         Display all fields of the specified task.

   set-priority <task-id> <new-priority>
         Sets the priority for task <task-id> to <new-priority>.

   set-title <task-id> <new-title>
         Sets the title for task <task-id> to <new-title>.

   set-message <task-id> <new-message-body>
         Sets the message body for task <task-id> to <new-message-body>.

   search <search-term> [<search-term>] [-a | --all]
         Searches all task'"'"'s title and message body fields for the specified
      search terms. By default the search matches ANY of the terms specified.
      To match ALL the terms specified use "-a" or "-all".

   prune
         Removes all tasks from the list that are at priority -1 or lower. This
      is a convenient way to mark tasks that must be removed without actually
      removing the task. Tasks that are at priority -1 can later be re-
      prioritised.

   delete <task-id> [f | --force]
         Permanently removes a task from the list. There is no way to resurrect
      a deleted task. To temporarily mark a task for deletion set the priority
      to -1. If you later change your mind about the task AND you haven'"'"'t
      pruned the task list, you can re-prioritise the task to a positive number.
         Deletion will prompt the user. To force deletion without a prompt use
      "-f" or "--force".
'
}

$SQLITE --version &> /dev/null || die "No $SQLITE program found"

CMD=$1
shift

CONJ=" OR "
ORDER_DIR="asc"
SORTBY="id"
PRIORITY=0

while (( "$#" )); do
  case "$1" in
     -h|--help)
         print_help_msg
         exit 0
         ;;
     -f|--force)
         FORCE="true"
         shift 1
         ;;
     -a|--all)
         CONJ=" AND "
         shift 1
         ;;
     -y|--any)
         CONJ=" OR "
         shift 1
         ;;
     -e)
         EDITOR=$2
         shift 2
         ;;
     --editor=*)
         EDITOR=`echo $1 | cut -f 2 -d =`
         [ -z "$EDITOR" ] && die "Missing editor program for --editor"
         shift
         ;;
     -p)
         PRIORITY=$2
         shift 2
         ;;
     --priority=*)
         PRIORITY=`echo $1 | cut -f 2 -d =`
         [ -z "$PRIORITY" ] && die "Missing priority number for --priority"
         shift
         ;;
     -s)
         SORTBY=$2
         shift 2
         ;;
     --sort-by=*)
         SORTBY=`echo $1 | cut -f 2 -d =`
         [ -z "$SORTBY" ] && die "Missing sort column for --sort-by"
         shift
         ;;
     -r|--reverse)
         ORDER_DIR="desc"
         shift 1
         ;;
    -[0-9]*)
         PARAMS="$PARAMS $1"
         shift
         ;;
    -*|--*) # unsupported flags
         echo "Error: Unsupported flag $1" >&2
         exit 1
         ;;
    *) # preserve positional arguments
         PARAMS="$PARAMS $1"
         shift
         ;;
  esac
done

case $CMD in

   createdb)
      createdb $PARAMS
      ;;

   list)
      list $PARAMS
      ;;

   add)
      add $PARAMS
      ;;

   show)
      show $PARAMS
      ;;

   set-priority)
      set_priority $PARAMS
      ;;

   set-title)
      set_title $PARAMS
      ;;

   set-message)
      set_message $PARAMS
      ;;

   search)
      search_db $PARAMS
      ;;

   delete)
      delete_task $PARAMS
      ;;

   prune)
      prune $PARAMS
      ;;

   --help)
      print_help_msg
      exit 0
      ;;

   *)
      echo "$@" not understood.
      ;;
esac
